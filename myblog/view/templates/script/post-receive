#!{{data.path_env}}

import base64
import hashlib
import logging
import os
import subprocess
import sys

path_project_root: str = os.path.dirname(
    os.path.dirname(os.path.dirname("{{data.path_env}}"))
)

sys.path.append(path_project_root)


from cryptography.fernet import Fernet


def get_post_id(post_title: str) -> str:
    hash_object = hashlib.md5(post_title.encode())
    hash_digest = hash_object.digest()

    title_id = base64.urlsafe_b64encode(hash_digest)[:20].decode()

    return title_id


path_log: str = os.path.join("{{data.path_log}}", "post-receive.log")


logging.basicConfig(
    filename=path_log,
    filemode="a",
    level=logging.DEBUG,
    format="%(asctime)s-%(levelname)s-%(funcName)s-%(message)s",
)

subprocess.check_output(
    [
        "git",
        "--work-tree={{data.path_worktree}}",
        "--git-dir={{data.path_gitdir}}",
        "checkout",
        "-f",
    ]
)


def encrypt_token(secret_key: bytes, data: str) -> str:
    fernet = Fernet(secret_key)
    token = fernet.encrypt(data.encode("utf-8"))

    return token.decode("utf-8")


def get_changed_files(oldrev, newrev) -> list:
    diff_output = subprocess.check_output(
        ["git", "diff", "--name-status", oldrev, newrev]
    )

    diff_output = diff_output.decode("utf-8").strip().split("\n")

    changed_files = []
    for line in diff_output:
        parts = line.split("\t")
        if len(parts) == 2:
            status, path = parts
            changed_files.append({"status": status, "path": path})

    return changed_files


def is_post(filename: str) -> bool:
    post_dirname: str = os.path.basename("{{data.path_post}}")
    file_dirname: str = os.path.dirname(os.path.dirname(filename))

    return post_dirname == file_dirname


for line in sys.stdin:
    oldrev, newrev, refname = line.strip().split()
    try:
        changed_files: list[dict] = get_changed_files(oldrev, newrev)
        logging.info(dict(changed_files=changed_files))
    except:
        continue
    for fileitems in changed_files:
        filename: str = fileitems["path"]
        status: str = fileitems["status"]
        logging.info(dict(filename=filename, status=status))
        if is_post(filename):
            logging.info(f"{filename} is a post.")
            posttitle: str = os.path.basename(filename).replace(".md", "")
            post_id: str = get_post_id(posttitle)
            logging.info(dict(posttitle=posttitle))
            logging.info(dict(post_id=post_id))

            match fileitems["status"]:
                case "A":
                    logging.info("post request")
                case "M":
                    logging.info("patch request")
                case "D":
                    logging.info("delete request")
        else:
            logging.warning(f"{fileitems} is not a post.")
