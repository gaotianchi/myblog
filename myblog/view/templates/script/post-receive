#!{{data.path_env}}

"""
Abstract: This module defines the POST-RECEIVE hook to send related requests 
when the user adds, updates, or deletes an article.

Author: Gao Tianchi
Contact: 6159984@gmail.com
Version: 0.3
Creation date: 2023-11-05
Copyright (C) 2023 Gao Tianchi
"""

import base64
import hashlib
import json
import logging
import os
import subprocess
import sys

import requests
from cryptography.fernet import Fernet

subprocess.check_output(
    [
        "git",
        "--work-tree={{data.path_worktree}}",
        "--git-dir={{data.path_gitdir}}",
        "checkout",
        "-f",
    ]
)


logging.basicConfig(
    filename=os.path.join("{{data.path_log}}", "post-receive.log"),
    filemode="a",
    level=logging.DEBUG,
    format="%(asctime)s-%(levelname)s-%(funcName)s-%(message)s",
)


def get_post_id(post_title: str) -> str:
    hash_object = hashlib.md5(post_title.encode())
    hash_digest = hash_object.digest()

    title_id = base64.urlsafe_b64encode(hash_digest)[:20].decode()

    return title_id


def encrypt_token(secret_key: bytes, data: str) -> str:
    fernet = Fernet(secret_key)
    token = fernet.encrypt(data.encode("utf-8"))

    return token.decode("utf-8")


def get_changed_files(oldrev, newrev) -> list:
    diff_output = subprocess.check_output(
        ["git", "diff", "--name-status", oldrev, newrev]
    )

    diff_output = diff_output.decode("utf-8").strip().split("\n")

    changed_files = []
    for line in diff_output:
        parts = line.split("\t")
        if len(parts) == 2:
            status, path = parts
            full_path: str = os.path.join("{{data.path_worktree}}", *path.split("/"))
            changed_files.append({"status": status, "path": full_path})

    return changed_files


def is_post(filename: str) -> bool:
    # This function defines whether the file is an article.
    # "post/path/to/a/file.md"
    post_dirname: str = os.path.basename("{{data.path_post}}")

    return filename.startswith(post_dirname) and filename.endswith(".md")


for line in sys.stdin:
    oldrev, newrev, refname = line.strip().split()
    try:
        changed_files: list[dict] = get_changed_files(oldrev, newrev)
        logging.info(dict(changed_files=changed_files))
    except:
        continue
    changed_files = [] if not changed_files else changed_files
    for fileitems in changed_files:
        filename: str = fileitems["path"]
        status: str = fileitems["status"]

        if is_post(filename):
            posttitle: str = os.path.basename(filename).replace(".md", "")
            post_id: str = get_post_id(posttitle)

            with open("{{data.path_key}}", "r", encoding="utf-8") as f:
                secret_key = f.read().encode("utf-8")

            name = "{{data.author_name}}"
            author_name = name if name else "Gao Tianchi"

            data: str = json.dumps(dict(name=author_name))

            token = encrypt_token(secret_key, data)

            match fileitems["status"]:
                case "A":
                    url = f"http://localhost:5000/add/post?token={token}"
                    try:
                        response = requests.post(
                            url, json=json.dumps(dict(path=filename))
                        )
                    except:
                        logging.error(f"{response} Fail to add post.")
                case "M":
                    url = f"http://localhost:5000/update/post?token={token}"
                    try:
                        response = requests.patch(
                            url, json=json.dumps(dict(path=filename))
                        )
                    except:
                        logging.error(f"{response} Fail to update post.")
                case "D":
                    url = f"http://localhost:5000/delete/post?token={token}"
                    try:
                        response = requests.delete(
                            url, json=json.dumps(dict(path=filename))
                        )
                    except:
                        logging.error(f"{response} Fail to delete post.")
        else:
            logging.warning(f"{fileitems} is not a post.")
